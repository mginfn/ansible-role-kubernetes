---
- name: Create a directory if it does not exist
  file:
    path: /etc/kubernetes/pki
    state: directory
    mode: '0755'

- name: Create auth data file with an admin user
  copy:
    content: '{{ kube_admin_token }},{{ kube_admin_username }},100,"users,system:masters"'
    dest: /etc/kubernetes/pki/auth
    mode: 600

- name: Kubeadm init
  command: kubeadm init --pod-network-cidr={{ kube_pod_network_cidr }} --token={{ kube_token }} --token-ttl {{ kube_token_ttl }} --apiserver-advertise-address={{ kube_api_server }} creates=/etc/kubernetes/admin.conf

- name: wait Kube to start
  wait_for:
    host: "{{ kube_api_server }}"
    port: 6443

- name: install flannel
  block:
  - template:
      src: templates/flannel.yaml
      dest: /etc/kube-flannel.yml
  - command: kubectl apply -f /etc/kube-flannel.yml creates=/etc/cni/net.d/10-flannel.conflist
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
  when: network_manager == "flannel"

- name: install calico
  block:
  - get_url:
      url: https://projectcalico.docs.tigera.io/archive/{{ calico_version }}/manifests/calico.yaml
      dest: /etc/kube-calico.yml
  - command: kubectl apply -f /etc/kube-calico.yml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
  when: network_manager == "calico"

- include: helm.yaml
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  when: kube_install_helm

- name: Add Kube API server options
  lineinfile:
    path: /etc/kubernetes/manifests/kube-apiserver.yaml
    line: '    - {{ item.option }}={{ item.value }}'
    regexp: '^    - {{ item.option }}='
    insertafter: '    - kube-apiserver'
  notify: restart kubeapi
  with_items: "{{ kube_apiserver_options }}"

- name: wait Kube to start
  wait_for:
    host: "{{ kube_api_server }}"
    port: 6443

- name: Set iptables for ingress floatingIPs
  block:
  - name: Delete all rules in all chains
    iptables: 
      flush: yes
  - name: 'iptables -A FORWARD -p tcp -d {{ nginx_ingress.master_private_ip }} --dport 443,80 -j ACCEPT'
    iptables:
      chain: FORWARD
      protocol: tcp
      destination: "{{ nginx_ingress.master_private_ip }}"
      destination_port: "{{ item }}"
      jump: ACCEPT
      comment: "managed by kubernetes ansible role"
    loop:
      - 443
      - 80        
  - name: 'iptables -t nat -A PREROUTING -p tcp -d {{ nginx_ingress.master_public_ip }} --dport 443,80 -j DNAT --to-destination {{ nginx_ingress.master_private_ip }}:443,80'
    iptables:
      table: nat
      chain: PREROUTING
      protocol: tcp
      destination: "{{ nginx_ingress.master_public_ip }}"
      destination_port: "{{ item }}"
      jump: DNAT
      to_destination: "{{ nginx_ingress.master_private_ip }}:{{ item }}"
      comment: "managed by kubernetes ansible role"
    loop:
      - 443
      - 80              
  - name: 'iptables -t nat -A POSTROUTING ! -s 127.0.0.1 -j MASQUERADE'
    iptables:
      table: nat     
      chain: POSTROUTING
      source: '! 127.0.0.1'
      jump: MASQUERADE
      comment: "managed by kubernetes ansible role"
  - name: save iptable configuration
    command: iptables-save

- name: wait Kube to start
  wait_for:
    host: "{{ kube_api_server }}"
    port: 6443

- name: install nginx ingress
  block:
  - template:
      src: templates/nginx-values.yaml
      dest: /etc/nginx-ingress-values.yml
  - command: "{{ item }}"
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    with_items:
      - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      - helm repo update
      - "helm upgrade --install --cleanup-on-fail --wait --timeout 10m0s ingress-nginx ingress-nginx/ingress-nginx --set controller.allowSnippetAnnotations=false \
        -n ingress-nginx --create-namespace --version {{ nginx_ingress_helm_version }} --values /etc/nginx-ingress-values.yml"
  when: nginx_ingress.enabled

- name: install cert manager
  command: "{{ item }}"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  with_items:
    - helm repo add jetstack https://charts.jetstack.io
    - helm repo update
    - "helm upgrade --install --cleanup-on-fail --wait --timeout 10m0s cert-manager jetstack/cert-manager \
      -n cert-manager --create-namespace --version {{ cert_manager_helm_version }} --set installCRDs=true"
  when: nginx_ingress.enabled

- name: wait Cert-Manager to start
  command: kubectl get deployment -n cert-manager -l 'app=webhook' -o 'jsonpath={.items[0].status.readyReplicas}'
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  register: cert_manager_webhook_deployment_status
  until: (cert_manager_webhook_deployment_status.stdout | default(0) | int) >= 1
  retries: 30
  delay: 15
  when: nginx_ingress.enabled

- name: define cluster issuer
  block:
  - template:
      src: templates/cluster-certs.yaml
      dest: /etc/cluster-certs.yml 
  - command: kubectl apply -f /etc/cluster-certs.yml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf

- name: install dashboard
  block:
  - copy:
      src: files/metric-server.yaml
      dest: /etc/metric-server.yml
  - template:
      src: templates/dashboard-values.yaml
      dest: /etc/dashboard-values.yml
  - command: "{{ item }}"
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    with_items:
      - helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
      - helm repo update
      - kubectl apply -f /etc/metric-server.yml
      - "helm upgrade --install --cleanup-on-fail --wait --timeout 10m0s dashboard kubernetes-dashboard/kubernetes-dashboard \
        -n kube-system --version {{ dashboard_helm_version }} --values /etc/dashboard-values.yml"
  when: nginx_ingress.enabled

- name: install prometheus
  block:
  - template:
      src: templates/prometheus-values.yaml
      dest: /etc/prometheus-values.yml
  - command: "{{ item }}"
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    with_items:
      - helm repo add prometheus https://prometheus-community.github.io/helm-charts
      - helm repo update
      - "helm upgrade --install --cleanup-on-fail --wait --timeout 10m0s prometheus prometheus/prometheus -n prometheus \
        --create-namespace --version {{ prometheus_helm_version }} --values /etc/prometheus-values.yml"
  when: nginx_ingress.enabled

- name: Install kube-eagle
  ansible.builtin.command: "{{ item }}"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  with_items:
    - helm repo add kube-eagle https://raw.githubusercontent.com/cloudworkz/kube-eagle-helm-chart/master
    - helm repo update
    - "helm upgrade --install --cleanup-on-fail --wait --timeout 10m0s kube-eagle kube-eagle/kube-eagle \
      --version {{ kube_eagle_helm_version }} -n kube-eagle --create-namespace"
  when: nginx_ingress.enabled

- name: Install grafana
  when: nginx_ingress.enabled
  block:
    - name: Copy templates/grafana-secret.yaml
      ansible.builtin.template:
        src: templates/grafana-secret.yaml
        dest: /etc/grafana-secret.yml
        mode: 0644
    - name: Copy templates/grafana-values.yaml
      ansible.builtin.template:
        src: templates/grafana-values.yaml
        dest: /etc/grafana-values.yml
        mode: 0644
    - name: Helm add grafana repo
      ansible.builtin.command: "{{ item }}"
      with_items:
        - helm repo add grafana https://grafana.github.io/helm-charts
        - helm repo update
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      changed_when: false
    - name: Helm install grafana
      ansible.builtin.shell:
        cmd: |
          helm upgrade --install --cleanup-on-fail --wait --timeout 10m0s grafana grafana/grafana \
          -n grafana --create-namespace --version {{ grafana_helm_version }} --values /etc/grafana-values.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: helm_grafana_install
      changed_when: >
        helm_grafana_install.rc == 0 or
        (
          ('Release "grafana" does not exist. Installing it now.' in helm_grafana_install.stdout) or
          ('Release "grafana" has been upgraded.' in helm_grafana_install.stdout)
        )
      failed_when: >
        helm_grafana_install.rc != 0 and
        (
          ('Release "grafana" does not exist. Installing it now.' not in helm_grafana_install.stdout) and
          ('Release "grafana" has been upgraded.' not in helm_grafana_install.stdout)
        )
    - name: Show result of Helm install grafana
      ansible.builtin.debug:
        var: helm_grafana_install
    - name: Kubectl apply -f /etc/grafana-secret.yml
      ansible.builtin.command: kubectl apply -n grafana -f /etc/grafana-secret.yml
      register: kubectl_grafana_secret_apply
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      changed_when:
        - kubectl_grafana_secret_apply.rc == 0
    - name: Show result of Kubectl apply -f /etc/grafana-secret.yml
      ansible.builtin.debug:
        var: kubectl_grafana_secret_apply

- name: expose apiserver through ingress
  block:
  - template:
      src: templates/api-server-ingress.yaml
      dest: /etc/api-server-ingress.yaml
  - command: kubectl apply -f /etc/api-server-ingress.yaml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf

- name: create service account for remote access
  block:
  - copy:
      src: files/kubeconfig
      dest: /etc/kubeconfig
  - copy:
      src: files/admin-cred.yaml
      dest: /etc/admin-cred.yml
  - shell: |
      kubectl apply -f /etc/admin-cred.yml
      kubectl create --dry-run=client clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:admin -o yaml | kubectl apply -f -
      export TOKEN=$(kubectl -n kube-system get secret admin-token -o jsonpath='{.data.token}' | base64 -d)
      kubectl config --kubeconfig=/etc/kubeconfig set-credentials admin --token=$TOKEN
      kubectl config --kubeconfig=/etc/kubeconfig set-cluster public --server=https://api-kubernetes.{{ dns_name }} --insecure-skip-tls-verify
      kubectl config --kubeconfig=/etc/kubeconfig set-context public --cluster=public --namespace=default --user=admin
      kubectl config --kubeconfig=/etc/kubeconfig use-context public
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf

- name: register kubeconfig
  shell: kubectl config --kubeconfig=/etc/kubeconfig view --raw
  register: kubeconfig
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: KUBECONFIG file
  debug:
    var: kubeconfig.stdout.split('\n')

- name: Install Kafka
  delegate_to: "{{ kube_front_end_ip }}"
  run_once: true
  ansible.builtin.import_tasks: kafka.yaml
  when: enable_kafka

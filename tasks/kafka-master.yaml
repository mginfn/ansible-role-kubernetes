---

- name: Download Kafka chart and decompress
  ansible.builtin.unarchive:
    src: "{{ kafka_chart_tarball }}"
    dest: /tmp
    remote_src: true

- name: Install Kafka chart
  block:
    # - name: Create Kafka namespace
    #   when: kafka_ui_enabled
    #   ansible.builtin.shell: |
    #     cat << EOF | kubectl create -f -
    #     apiVersion: v1
    #     kind: Namespace
    #     metadata:
    #       name: {{ kafka_namespace }}
    #     EOF
    #   environment:
    #     KUBECONFIG: /etc/kubernetes/admin.conf
    #   register: kubectl_create_kafka_namespace
    #   changed_when:
    #     - kubectl_create_kafka_namespace.rc == 0
    #   failed_when:
    #     - kubectl_create_kafka_namespace.rc != 0
    # - name: Create kafka-ui-cert-secret
    #   when: kafka_ui_enabled
    #   ansible.builtin.shell: |
    #     cat << EOF | kubectl create -f -
    #     apiVersion: v1
    #     kind: Secret
    #     metadata:
    #       name: kafka-ui-cert-secret
    #       namespace: {{ kafka_namespace }}
    #     type: Opaque
    #     stringData:
    #       admin-user: admin
    #       admin-password: {{ kube_admin_token }}
    #     EOF
    #   environment:
    #     KUBECONFIG: /etc/kubernetes/admin.conf
    #   register: kubectl_create_kafka_ui_secret
    #   changed_when:
    #     - kubectl_create_kafka_ui_secret.rc == 0
    #   failed_when:
    #     - kubectl_create_kafka_ui_secret.rc != 0
    - name: Compose Kafka chart install command
      ansible.builtin.set_fact:
        kafka_chart_install_command: >-
          helm upgrade --install {{ kafka_release_name }} /tmp/{{ (kafka_chart_tarball.split('/') | last).split('.') | first }}
            --set global.namespace={{ kafka_namespace }}
            --set global.kafka.enabled={{ kafka_enabled }}
            --set global.kafka.replicas={{ kafka_replicas }}
            --set global.kafka.ports.public_client={{ kafka_enable_public_connections | ternary(kafka_public_port, false) }}
            --set global.kafka.public_ips="{{ '{' + kafka_public_ips + '}' }}"
            --set global.kafka.kraft.enabled={{ kafka_kraft_enabled and (kafka_kraft_replicas > 0) }}
            --set global.kafka.kraft.replicas={{ kafka_kraft_replicas }}
            --set global.kafka.kraft.ports.public_client={{ kafka_kraft_enable_public_connections | ternary(kafka_kraft_public_port, false) }}
            --set global.zookeeper.enabled={{ zookeeper_enabled and (zookeeper_replicas > 0) }}
            --set global.zookeeper.replicas={{ zookeeper_replicas }}
            --set global.zookeeper.ports.public_client={{ zookeeper_enable_public_connections | ternary(zookeeper_public_port, false) }}
            --set global.kafka-ui.enabled={{ kafka_ui_enabled }}
            --set global.kafka-ui.ports.public_client=80
            --set kafka-ui.env.admin_password={{ kafka_ui_admin_password }}
            --set kafka-ui.ingress.dns_name={{ dns_name }}
            --set kafka-ui.ingress.cluster_cert_issuer={{ cluster_issuer_name | trim }}
            --set kafka-ui.ingress.tls_secret=kafka-ui-cert-secret
            --set kafka.volume.storageClass=longhorn
    - name: Install Kafka chart [dry-run]
      ansible.builtin.command: "{{ kafka_chart_install_command }} --dry-run --debug"
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: kafka_chart_install_dry_run
      changed_when: false
      ignore_errors: true
    - name: Log Kafka chart install output [dry-run]
      ansible.builtin.debug:
        var: kafka_chart_install_dry_run
    - name: Install Kafka chart
      ansible.builtin.command: "{{ kafka_chart_install_command }}"
      # ansible.builtin.shell:
      #   cmd: |
      #     helm upgrade --install [...]
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: kafka_chart_install
      changed_when: >
        kafka_chart_install.rc == 0
      failed_when: >
        kafka_chart_install.rc != 0
      ignore_errors: true
    - name: Log Kafka chart install output
      ansible.builtin.debug:
        var: kafka_chart_install

- name: Fail if Kafka chart has not been installed
  block:
    - name: Get status of Kafka chart release
      ansible.builtin.command: helm status {{ kafka_release_name }}
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: kafka_chart_status
      changed_when: false
      ignore_errors: true # { "rc": 1, "stderr": "Error: release: not found" }
    - name: Log Kafka chart status
      ansible.builtin.debug:
        var: kafka_chart_status
    - name: Fail if Kafka chart has not been installed
      ansible.builtin.fail:
        msg: Error installing Kafka chart
      when: >
        ('STATUS: deployed' not in kafka_chart_status.stdout)

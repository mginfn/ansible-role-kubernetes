- name: Log installed pip version on remote node
  block:
    - name: Gather installed pip version on remote node
      ansible.builtin.command: pip --version | cut -d ' ' -f 2
      register: cmd_pip_version_output
      failed_when: false
      changed_when: false
    - name: Log installed pip version on remote node
      ansible.builtin.debug:
        msg: "{{ cmd_pip_version_output.stdout }}"
      when: cmd_pip_version_output.rc == 0

- name: Log installed ansible version on Control node
  block:
    - name: Gather installed ansible version on Control node
      delegate_to: 127.0.0.1
      ansible.builtin.command: pip show ansible
      register: cmd_ansible_version_output
      failed_when: false
      changed_when: false
    - name: Log installed ansible version on Control node
      ansible.builtin.debug:
        msg: "{{ cmd_ansible_version_output.stdout }}"
      when: cmd_ansible_version_output.rc == 0

- name: Log variables
  block:
    - name: Log all variables/facts known for current host
      ansible.builtin.debug:
        var: hostvars[inventory_hostname]
      tags: debug_info
    - name: Log all playbook variables not in hostvars
      ansible.builtin.debug:
        msg: "{{ _msg }}"
      vars:
        _special_vars:
          - hostvars
        _hostvars: "{{ hostvars[inventory_hostname].keys() }}"
        _my_vars: "{{ vars.keys() |
                      difference(_hostvars) |
                      difference(_special_vars) |
                      reject('match', '^ansible_.*$') |
                      reject('match', '^_.*$') |
                      list |
                      sort }}"
        _msg: |
          [{% for k in _my_vars %}
          {{ k }}: {{ lookup('vars', k) }}{% if not loop.last %}, {% endif %}
          {% endfor %}]
      tags: debug_info
